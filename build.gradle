plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
}

ext {
    minecraft_version = '1.20.1'
    forge_version = '47.2.0'
    mod_id = 'piglin_companion_mod'
    mod_name = 'Piglin Companion Mod'
    mod_version = '1.0.0'
    mod_authors = 'wizardVadim'
    mod_description = 'Мод позволяет приручать пиглинов с помощью золотых слитков.'
    mod_license = 'MIT'
    mapping_channel = 'official'
    mapping_version = '1.20.1'
    minecraft_version_range = '[1.20.1]'
    forge_version_range = '[47,48)'
    loader_version_range = '[47,)'
}

tasks.register('generateModsToml') {
    inputs.file('src/main/resources/META-INF/mods.toml.template')
    outputs.file("$buildDir/generated/resources/META-INF/mods.toml")

    doLast {
        def template = file('src/main/resources/META-INF/mods.toml.template').text

        def result = template
                .replace('${mod_id}', project.mod_id)
                .replace('${mod_version}', project.mod_version)
                .replace('${mod_authors}', project.mod_authors)
                .replace('${mod_description}', project.mod_description)

        def outputFile = file("$buildDir/generated/resources/META-INF/mods.toml")
        outputFile.parentFile.mkdirs()
        outputFile.text = result
    }
}

// Дополняем задачу processResources
tasks.processResources {
    dependsOn(tasks.generateModsToml)

    from("$buildDir/generated/resources") {
        into ''
    }
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// Добавляем сгенерированные ресурсы в sourceSets
sourceSets.main.resources.srcDir("$buildDir/generated/resources")

version = mod_version
group = 'com.wizardVadim'

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: mapping_channel, version: mapping_version
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
            jvmArgs += ['-Dmixin.debug=true', '-Dmixin.checks.interfaces=true']
        }
        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
            args '--nogui'
            jvmArgs += ['-Dmixin.debug=true', '-Dmixin.checks.interfaces=true']
        }
    }
    copyIdeResources = true
}

repositories {
    maven { url = "https://repo.spongepowered.org/maven" }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
}

tasks.named('jar', Jar).configure {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes([
                'Specification-Title': mod_id,
                'Specification-Vendor': mod_authors,
                'Specification-Version': '1',
                'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Implementation-Vendor': mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        ])
    }
    finalizedBy 'reobfJar'
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += "-XprintRounds"
}